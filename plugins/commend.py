import os, random, asyncio, time 
from Script import script
from database.users_db import db
from pyrogram import Client, filters, enums
from pyrogram.errors import *
from pyrogram.types import *
from info import BOT_USERNAME, ADMINS, OWNER_USERNAME, SUPPORT, PICS, CHANNEL, LOG_CHANNEL, FSUB, BIN_CHANNEL
import re
from utils import get_readable_time
from web.utils import StartTime, __version__
from plugins.marvaldoom import is_user_joined

# Modified by @marvaldoom

@Client.on_message(filters.command("start") & filters.incoming)
async def start(client, message):
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.first_name)
        await client.send_message(LOG_CHANNEL, script.LOG_TEXT.format(message.from_user.id, message.from_user.mention))
    if FSUB:
        if not await is_user_joined(client, message):
            return
    if len(message.command) != 2 or (len(message.command) == 2 and message.command[1] == "start"):
        buttons = [[
            InlineKeyboardButton('‚Ä¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ‚Ä¢', url=CHANNEL),
	    InlineKeyboardButton('‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url=SUPPORT)
        ],[
            InlineKeyboardButton('‚Ä¢  ú·¥á ü·¥ò ‚Ä¢', callback_data='help'),
            InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
        ],[
 	    InlineKeyboardButton('‚ôªÔ∏è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ‚ôªÔ∏è', url=f"https://t.me/{OWNER_USERNAME}")
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=(PICS),
            caption=script.START_TXT.format(message.from_user.mention, BOT_USERNAME),
            reply_markup=reply_markup
        )
        return
    msg = message.command[1]

    if msg.startswith("file"):
        _, file_id = msg.split("_", 1)
        return await client.copy_message(chat_id=message.from_user.id, from_chat_id=int(BIN_CHANNEL), message_id=int(file_id))

# Modified by @marvaldoom
	
@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data == "close_data":
        await query.message.delete()
    elif query.data == "about":
        buttons = [[
	    InlineKeyboardButton('üíª ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ', url='https://t.me/AV_SUPPORT_GROUP')
	],[
            InlineKeyboardButton('‚Ä¢  ú·¥è·¥ç·¥á ‚Ä¢', callback_data='start'),
	    InlineKeyboardButton('‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢', callback_data='close_data')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        me2 = (await client.get_me()).mention
        await query.message.edit_text(
            text=script.ABOUT_TXT.format(me2, me2, get_readable_time(time.time() - StartTime), __version__),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    
    elif query.data == "start":
        buttons = [[
            InlineKeyboardButton('‚Ä¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ‚Ä¢', url=CHANNEL),
	    InlineKeyboardButton('‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url=SUPPORT)
        ],[
            InlineKeyboardButton('‚Ä¢  ú·¥á ü·¥ò ‚Ä¢', callback_data='help'),
            InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
        ],[
 	    InlineKeyboardButton('‚ôªÔ∏è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ç ‚ôªÔ∏è', url=f"https://t.me/{OWNER_USERNAME}")
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.START_TXT.format(query.from_user.mention, BOT_USERNAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

# Modified by @marvaldoom
	
    elif query.data == "help":
        buttons = [[
            InlineKeyboardButton('‚Ä¢ ·¥Ä·¥Ö·¥ç…™…¥ ‚Ä¢', callback_data='admincmd')
	],[
	    InlineKeyboardButton('‚Ä¢  ú·¥è·¥ç·¥á ‚Ä¢', callback_data='start'),
	    InlineKeyboardButton('‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢', callback_data='close_data')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.HELP_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )  

    elif query.data == "admincmd":
        #if user isnt admin then return
        if not query.from_user.id in ADMINS:
            return await query.answer('This Feature Is Only For Admins !' , show_alert=True)
        buttons = [[
            InlineKeyboardButton('‚Ä¢  ú·¥è·¥ç·¥á ‚Ä¢', callback_data='start')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.ADMIN_CMD_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML,
       )

# Modified by @marvaldoom
	
    elif query.data.startswith("sendAlert"):
        user_id =(query.data.split("_")[1])
        user_id = int(user_id.replace(' ' , ''))
        if len(str(user_id)) == 10:
            reason = str(query.data.split("_")[2])
            try:
                await client.send_message(user_id , f"<b> è·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö  ô è [·¥Ä·¥† ·¥Ñ ú·¥Ä·¥õ ·¥è·¥°…¥·¥á Ä](https://telegram.me/AV_OWNER_BOT)\n Ä·¥á·¥Äs·¥è…¥ : {reason}</b>")
                await query.message.edit(f"<b>A ü·¥á Ä·¥õ s·¥á…¥·¥õ ·¥õ·¥è <code>{user_id}</code>\n Ä·¥á·¥Äs·¥è…¥ : {reason}</b>")
            except Exception as e:
                await query.message.edit(f"<b>s Ä è …™ …¢·¥è·¥õ ·¥õ ú…™s ·¥á Ä Ä·¥è Ä : {e}</b>")
        else:
            await query.message.edit(f"<b>T ú·¥á ·¥ò Ä·¥è·¥Ñ·¥áss ·¥°·¥Äs …¥·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö  ô·¥á·¥Ñ·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥ús·¥á Ä …™·¥Ö ·¥°·¥Äs …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö, ·¥è Ä ·¥ò·¥á Ä ú·¥Ä·¥òs …™·¥õ ·¥°·¥Äs ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö</b>")

    elif query.data.startswith('noAlert'):
        user_id =(query.data.split("_")[1])
        user_id = int(user_id.replace(' ' , ''))
        await query.message.edit(f"<b>T ú·¥á  ô·¥Ä…¥ ·¥è…¥ <code>{user_id}</code> ·¥°·¥Äs ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á·¥Ö s…™ ü·¥á…¥·¥õ ü è.</b>")

    elif query.data.startswith('sendUnbanAlert'):
        user_id =(query.data.split("_")[1])
        user_id = int(user_id.replace(' ' , ''))
        if len(str(user_id)) == 10:
            try:
                unban_text = "<b> ú·¥ú Ä Ä·¥Ä è.. è·¥è·¥ú ·¥Ä Ä·¥á ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö  ô è [·¥Ä·¥† ·¥Ñ ú·¥Ä·¥õ ·¥è·¥°…¥·¥á Ä](https://telegram.me/AV_OWNER_BOT)</b>"
                await client.send_message(user_id , unban_text)
                await query.message.edit(f"<b>U…¥ ô·¥Ä…¥…¥·¥á·¥Ö A ü·¥á Ä·¥õ s·¥á…¥·¥õ ·¥õ·¥è <code>{user_id}</code>\n·¥Ä ü·¥á Ä·¥õ ·¥õ·¥áx·¥õ : {unban_text}</b>")
            except Exception as e:
                await query.message.edit(f"<b>s Ä è …™ …¢·¥è·¥õ ·¥õ ú…™s ·¥á Ä Ä·¥è Ä : {e}</b>")
        else:
            await query.message.edit(f"<b>T ú·¥á ·¥ò Ä·¥è·¥Ñ·¥áss ·¥°·¥Äs …¥·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö  ô·¥á·¥Ñ·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥ús·¥á Ä …™·¥Ö ·¥°·¥Äs …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö, ·¥è Ä ·¥ò·¥á Ä ú·¥Ä·¥òs …™·¥õ ·¥°·¥Äs ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö</b>")
            
    elif query.data.startswith('NoUnbanAlert'):
        user_id =(query.data.split("_")[1])
        user_id = int(user_id.replace(' ' , ''))
        await query.message.edit(f"T ú·¥á ·¥ú…¥ ô·¥Ä…¥ ·¥è…¥ <code>{user_id}</code> ·¥°·¥Äs ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á·¥Ö s…™ ü·¥á…¥·¥õ ü è.")

# Modified by @marvaldoom

@Client.on_message(filters.command("help"))
async def help(client, message):
    btn = [[
       InlineKeyboardButton('‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢', callback_data='close_data')
    ]]
    reply_markup = InlineKeyboardMarkup(btn)
    await message.reply_text(
        text=script.HELP2_TXT,
        disable_web_page_preview=True, 
        reply_markup=reply_markup
    )

# Modified by @marvaldoom

@Client.on_message(filters.command("about"))
async def about(client, message):
    buttons = [[
       InlineKeyboardButton('‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢', callback_data='close_data')
    ]]
    reply_markup = InlineKeyboardMarkup(buttons)
    me2 = (await client.get_me()).mention
    await message.reply_text(
        text=script.ABOUT_TXT.format(me2, me2, get_readable_time(time.time() - StartTime), __version__),
        disable_web_page_preview=True, 
        reply_markup=reply_markup
    )
	
# Modified by @marvaldoom
